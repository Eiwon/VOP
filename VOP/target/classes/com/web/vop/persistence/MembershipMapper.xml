<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.web.vop.persistence.MembershipMapper">

   <resultMap type="com.web.vop.domain.MembershipVO" id="MembershipResultMap">
      <id property="membershipId" column="MEMBERSHIP_ID"/> 
      <result property="memberId" column="MEMBER_ID"/>
      <result property="joinDate" column="JOIN_DATE"/>
      <result property="expiryDate" column="EXPIRY_DATE"/>
      <result property="paymentDate" column="PAYMENT_DATE"/>
      <result property="membershipFee" column="MEMBERSHIP_FEE"/>
      <result property="chargeId" column="CHARGE_ID"/>
   </resultMap>
   
   <resultMap type="com.web.vop.domain.MembershipExpiryDTO" id="MembershipExpiryResultMap">
   		<id property="memberId" column="MEMBER_ID"/> 
      	<result property="expiryDate" column="EXPIRY_DATE"/>
      	<result property="memberEmail" column="MEMBER_EMAIL"/>
   </resultMap>
   
   
   <!-- membershipId 생성 -->
	<select id="selectNextMembershipId" resultType="Integer">
		SELECT MEMBERSHIP_SEQ.NEXTVAL FROM DUAL
	</select>
   
   <!-- 멤버십 결제 등록 -->
   <!--  <insert id="insertMembershipPayment">
		INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBER_ID, JOIN_DATE, EXPIRY_DATE, PAYMENT_DATE, MEMBERSHIP_FEE, CHARGE_ID) 
		VALUES (#{membershipId}, #{memberId}, SYSDATE, SYSDATE + INTERVAL '5' DAY, SYSDATE, #{membershipFee}, #{chargeId})
	</insert>-->
   
   <!-- 멤버십 등록 -->
   <insert id="insertMembership">
      INSERT INTO MEMBERSHIP (MEMBERSHIP_ID, MEMBER_ID, JOIN_DATE, EXPIRY_DATE, PAYMENT_DATE, MEMBERSHIP_FEE, CHARGE_ID) 
      VALUES (#{membershipId}, #{memberId}, SYSDATE, SYSDATE + INTERVAL '1' MINUTE, SYSDATE, #{membershipFee}, #{chargeId})
   </insert>

	<!-- 멤버십 권한 수정 -->
	<update id="updateMemberAuthOnInsert">
        UPDATE MEMBER SET MEMBER_AUTH = '멤버십' WHERE MEMBER_ID = #{memberId} AND MEMBER_AUTH = '일반'
	</update> 
	
	<!-- 멤버십 전체 조회 -->
	<select id="selectByMemberId" resultMap="MembershipResultMap">
		SELECT * FROM MEMBERSHIP WHERE MEMBER_ID = #{memberId}
	</select>
	
	<!-- memberId로 만료되지 않은 멤버십만 조회 -->
	<select id="selectValidByMemberId" resultMap="MembershipResultMap">
		SELECT * FROM MEMBERSHIP WHERE MEMBER_ID = #{memberId} AND EXPIRY_DATE &gt; SYSDATE
	</select>
	
	<!-- 멤버십 만료 기간 조회 -->
	<select id="selectExpiryDate" resultType="Date">
		SELECT EXPIRY_DATE FROM MEMBERSHIP WHERE MEMBER_ID = #{memberId}
	</select>
	
	<!-- 멤버십 삭제(해지) -->
	<delete id="deleteMembership">
		DELETE MEMBERSHIP WHERE MEMBER_ID = #{memberId}
	</delete>	
	
	<!-- 멤버십 삭제 시 권한 업데이트 -->
	<update id="updateMemberAuthOnDelete">
        UPDATE MEMBER SET MEMBER_AUTH = '일반' WHERE MEMBER_ID = #{memberId} AND MEMBER_AUTH = '멤버십'
	</update>
	
	<!-- 멤버십 만료일 조회 (스케줄링) -->
	<select id="selectExpiryDateBySchedulling" resultMap="MembershipExpiryResultMap">
		SELECT MS.*, M.MEMBER_EMAIL 
		FROM(
			SELECT MEMBER_ID, EXPIRY_DATE 
			FROM MEMBERSHIP
		) MS
		JOIN MEMBER M ON MS.MEMBER_ID = M.MEMBER_ID
		<!-- 이 쿼리는 MEMBERSHIP 테이블에서 MEMBER_ID와 EXPIRY_DATE를 선택하고, 이 결과에 MS라는 별칭을 붙입니다. 
		그런 다음 MEMBER 테이블과 MEMBER_ID를 기준으로 조인하여 MS.*와 M.MEMBER_EMAIL을 선택합니다. -->
		<!-- MembershipExpiryDTO 클래스에 매핑 -->
	</select>
	
	<!-- 멤버십 환불아이디(chargeId) 조회 -->
	<select id="selectChargeIdByMemberId" resultType="String">
		SELECT CHARGE_ID FROM MEMBERSHIP WHERE MEMBER_ID = #{memberId}
	</select>
	
</mapper>


