<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.vop.persistence.ProductMapper">

   <resultMap type="com.web.vop.domain.ProductVO"
      id="productResultMap">
      <id property="productId" column="PRODUCT_ID" /> 
      <result property="memberId" column="MEMBER_ID" />
      <result property="productName" column="PRODUCT_NAME"/>
      <result property="productPrice" column="PRODUCT_PRICE"/>
      <result property="reviewNum" column="REVIEW_NUM"/>
      <result property="productRemains" column="PRODUCT_REMAINS"/>
      <result property="productPlace" column="PRODUCT_PLACE"/>
      <result property="productState" column="PRODUCT_STATE"/>
      <result property="category" column="CATEGORY"/>
      <result property="imgId" column="IMG_ID"/>
      <result property="productDateCreated" column="PRODUCT_DATE_CREATED"/>
      <result property="reviewAvg" column="REVIEW_AVG"/>
   </resultMap>
   
   <resultMap type="com.web.vop.domain.ProductDetailsDTO" 
   		id="productDetailsResultMap">
   		<result property="businessName" column="BUSINESS_NAME"/>
   		<association property="productVO" javaType="com.web.vop.domain.ProductVO" 
   					 resultMap="productResultMap"/>
   		<association property="memberVO" javaType="com.web.vop.domain.MemberVO" 
   					 resultMap="com.web.vop.persistence.MemberMapper.memberResultMap"/>
   		<association property="thumbnail" javaType="com.web.vop.domain.ImageVO" 
   					 resultMap="com.web.vop.persistence.ImageMapper.imageResultMap"/>
   		<!-- <id property="productId" column="PRODUCT_ID"/>
   		<result property="memberId" column="MEMBER_ID"/>
     	<result property="productName" column="PRODUCT_NAME"/>
      	<result property="productPrice" column="PRODUCT_PRICE"/>
   		<result property="productRemains" column="PRODUCT_REMAINS"/>
      	<result property="productPlace" column="PRODUCT_PLACE"/>
      	<result property="productState" column="PRODUCT_STATE"/>
      	<result property="category" column="CATEGORY"/>
      	<result property="imgId" column="IMG_ID"/>
      	<result property="productDateCreated" column="PRODUCT_DATE_CREATED"/>
		<result property="memberName" column="MEMBER_NAME"/>
		<result property="memberEmail" column="MEMBER_EMAIL"/>
		<result property="memberPhone" column="MEMBER_PHONE"/>
		<result property="businessName" column="BUSINESS_NAME"/> -->
   </resultMap>
   
   <resultMap type="com.web.vop.domain.ProductPreviewDTO" 
 	  	id="productPreviewResultMap">
 	  	<result property="imgPath" column="IMG_PATH"/>
   		<result property="imgChangeName" column="IMG_CHANGE_NAME"/>
   		<association property="productVO" javaType="com.web.vop.domain.ProductVO" resultMap="productResultMap"/>
   
   </resultMap>
   
   <!-- <resultMap type="com.web.vop.domain.OrderViewDTO" id="OrderViewDTOResultMap">
   		<result property="imgPath" column="IMG_PATH"/>
   		<result property="imgChangeName" column="IMG_CHANGE_NAME"/>
   		<association property="orderVO" javaType="com.web.vop.domain.OrderVO" resultMap="OrderResultMap"/>
   </resultMap> -->
   
   <!-- productId통해 상품 조회 -->
   <select id="selectProduct" resultMap="productResultMap">
   		SELECT * FROM PRODUCT
   		WHERE PRODUCT_ID = #{productId}
   </select>
   
   <!-- productId로 상품 미리보기 조회 -->
   <select id="selectPreviewById" resultMap="productPreviewResultMap">
   		SELECT PD.*, IMAGE.IMG_PATH, IMAGE.IMG_CHANGE_NAME FROM (
		SELECT *
		FROM PRODUCT WHERE PRODUCT_ID = #{productId} AND PRODUCT_STATE = '판매중'
		) PD INNER JOIN IMAGE ON PD.IMG_ID = IMAGE.IMG_ID
   </select> 
   
   <!-- 댓글 총 갯수 검색  -->
   <!-- resultType="java.lang.Integer" 단일 값때만 사용, 코드 추가해서 테스트 통과 -->
   <select id="selectReviewCount" resultType="Integer">
    	SELECT COUNT(*) AS PRODUCT FROM REVIEW 
    	WHERE PRODUCT_ID = #{productId}
   </select>
   
   <!-- 상품 댓글 수 카운터 -->
   <update id="updateReviewNum">
   		UPDATE PRODUCT SET REVIEW_NUM = #{reviewNum}
		WHERE PRODUCT_ID = #{productId}
   </update>
   
    <!-- 리뷰 평균 값 수정 -->
    <update id="updateReviewAvg">
		UPDATE PRODUCT SET REVIEW_AVG = #{reviewAvg}
		WHERE PRODUCT_ID = #{productId}
    </update>
    
    <!-- 상품 총 댓글 수 증가 -->
	<update id="reviewNumUP">
		UPDATE PRODUCT SET REVIEW_NUM = REVIEW_NUM + 1
		WHERE PRODUCT_ID = #{productId}
	</update>
	
	<!-- 상품 총 댓글 수 감소 -->
	<update id="reviewNumDown">
		UPDATE PRODUCT SET REVIEW_NUM = REVIEW_NUM - 1
		WHERE PRODUCT_ID = #{productId}
	</update>

	<!-- 상품 등록 -->
	<insert id="insertProduct">
   		INSERT INTO PRODUCT VALUES (
   		0, #{memberId}, #{productName}, #{productPrice},
   		0, #{productRemains}, #{productPlace}, #{productState}, #{category}, 
   		0, CURRENT_TIMESTAMP(), 0 
   		)
   		<!-- INSERT INTO PRODUCT VALUES (
   		PRODUCT_SEQ.NEXTVAL, #{memberId}, #{productName}, #{productPrice},
   		0, #{productRemains}, #{productPlace}, #{productState}, #{category}, 
   		0, SYSDATE, 0 
   		) -->
	</insert>

	<!-- 썸네일이 있는 상품 등록 -->
	<insert id="insertProductWithThumbnail">
   		INSERT INTO PRODUCT VALUES (
   		0, #{memberId}, #{productName}, #{productPrice},
   		0, #{productRemains}, #{productPlace}, #{productState}, #{category}, 
   		(SELECT MAX(IMG_ID) FROM IMAGE), CURRENT_TIMESTAMP(), 0 
   		)
   		<!-- INSERT INTO PRODUCT VALUES (
   		PRODUCT_SEQ.NEXTVAL, #{memberId}, #{productName}, #{productPrice},
   		0, #{productRemains}, #{productPlace}, #{productState}, #{category}, 
   		IMAGE_SEQ.CURRVAL, SYSDATE, 0 
   		) -->
	</insert>

	<!-- 검색어 또는 카테고리 검색 (페이징) -->
	<select id="selectByNameNCategory" resultMap="productPreviewResultMap">
		SELECT PD.*, IMAGE.IMG_PATH, IMAGE.IMG_CHANGE_NAME FROM (
		SELECT * FROM (
   		SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN
   		FROM PRODUCT
   		<choose>
   			<when test="category == '전체'.toString()">
   				WHERE PRODUCT_NAME LIKE CONCAT('%', #{word}, '%') AND PRODUCT_STATE = '판매중'
   			</when>
   			<otherwise>
   				WHERE CATEGORY = #{category} AND 
   				PRODUCT_NAME LIKE CONCAT('%', #{word}, '%') AND PRODUCT_STATE = '판매중'
   			</otherwise>
   		</choose>
 		) P WHERE RN BETWEEN #{start} AND #{end}
   		) PD LEFT JOIN IMAGE ON PD.IMG_ID = IMAGE.IMG_ID
   		<!-- SELECT PD.*, IMAGE.IMG_PATH, IMAGE.IMG_CHANGE_NAME FROM (
		SELECT * FROM (
   		SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN
   		FROM PRODUCT
   		<choose>
   			<when test="category == '전체'.toString()">
   				WHERE PRODUCT_NAME LIKE '%'||#{word}||'%' AND PRODUCT_STATE = '판매중'
   			</when>
   			<otherwise>
   				WHERE CATEGORY = #{category} AND 
   				PRODUCT_NAME LIKE '%'||#{word}||'%' AND PRODUCT_STATE = '판매중'
   			</otherwise>
   		</choose>
 		) WHERE RN BETWEEN #{start} AND #{end}
   		) PD LEFT JOIN IMAGE ON PD.IMG_ID = IMAGE.IMG_ID -->
	</select>
	
	<!-- 검색어 또는 카테고리 검색결과 수 -->
	<select id="selectByNameNCategoryCnt" resultType="Integer">
   		SELECT COUNT(*) FROM PRODUCT
   		<choose>
   			<when test="category == '전체'.toString()">
   				WHERE PRODUCT_NAME LIKE CONCAT('%', #{word}, '%') AND PRODUCT_STATE = '판매중'
   			</when>
   			<otherwise>
   				WHERE CATEGORY = #{category} AND 
   				PRODUCT_NAME LIKE CONCAT('%', #{word}, '%') AND PRODUCT_STATE = '판매중'
   			</otherwise>
   		</choose>
   		<!-- SELECT COUNT(*) FROM PRODUCT
   		<choose>
   			<when test="category == '전체'.toString()">
   				WHERE PRODUCT_NAME LIKE '%'||#{word}||'%' AND PRODUCT_STATE = '판매중'
   			</when>
   			<otherwise>
   				WHERE CATEGORY = #{category} AND 
   				PRODUCT_NAME LIKE '%'||#{word}||'%' AND PRODUCT_STATE = '판매중'
   			</otherwise>
   		</choose> -->
	</select>
	
	<!-- memberId로 상품 조회 -->
	<select id="selectByMemberId" resultMap="productPreviewResultMap">
		SELECT PD.*, IMAGE.IMG_PATH, IMAGE.IMG_CHANGE_NAME FROM (
		SELECT * FROM (
		SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN
		FROM PRODUCT WHERE MEMBER_ID = #{memberId}
		) P WHERE RN BETWEEN #{pagination.start} AND #{pagination.end}
		) PD INNER JOIN IMAGE ON PD.IMG_ID = IMAGE.IMG_ID
	</select>
	
	<!-- memberId로 상품 갯수 조회 -->
	<select id="selectByMemberIdCnt" resultType="Integer">
		SELECT COUNT(PRODUCT_ID) FROM PRODUCT WHERE MEMBER_ID = #{memberId}
	</select>
	
	<!-- productId로 상품 상태 변경 -->
	<update id="updateState">
		UPDATE PRODUCT SET PRODUCT_STATE = #{productState} WHERE PRODUCT_ID = #{productId}
	</update>
	
	<!-- productId로 상품 상태 검색 -->
	<select id="selectStateByProductId" resultType="String">
		SELECT PRODUCT_STATE FROM PRODUCT WHERE PRODUCT_ID = #{productId}
	</select>
	
	<!-- productId로 상품 삭제 -->
	<delete id="deleteProduct">
		DELETE PRODUCT WHERE PRODUCT_ID = #{productId}
	</delete>
	
	<!-- 카테고리별 최다 리뷰 5개 상품 검색 -->
	<select id="selectTopProductByCategory" resultMap="productPreviewResultMap">
		SELECT TOP.*, IMAGE.IMG_PATH, IMAGE.IMG_CHANGE_NAME FROM(
			SELECT * FROM (
				SELECT PRODUCT.*, ROW_NUMBER() OVER (PARTITION BY CATEGORY ORDER BY REVIEW_NUM DESC) RN 
				FROM PRODUCT WHERE PRODUCT_STATE = '판매중'
			) P WHERE RN BETWEEN 1 AND 5 ORDER BY CATEGORY
		) TOP LEFT JOIN IMAGE ON TOP.IMG_ID = IMAGE.IMG_ID
	</select>
	
	<!-- 최근 등록된 상품 5개 조회 -->
	<select id="selectRecent5" resultMap="productPreviewResultMap">
		SELECT PD.*, IMAGE.IMG_PATH, IMAGE.IMG_CHANGE_NAME FROM (
			SELECT * FROM (
				SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN FROM PRODUCT
				WHERE PRODUCT_STATE = '판매중'
			) P WHERE RN BETWEEN 1 AND 5
		) PD LEFT JOIN IMAGE ON PD.IMG_ID = IMAGE.IMG_ID
	</select>

	<!-- 상태가 ??인 모든 상품 검색(페이징) -->
	<select id="selectStateIs" resultMap="productPreviewResultMap">
		SELECT PD.*, IMAGE.IMG_PATH, IMAGE.IMG_CHANGE_NAME FROM (
			SELECT * FROM (
				SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN FROM PRODUCT
				WHERE PRODUCT_STATE = #{productState}
			) P WHERE RN BETWEEN #{pagination.start} AND #{pagination.end}
		) PD LEFT JOIN IMAGE ON PD.IMG_ID = IMAGE.IMG_ID
	</select>
	
	<!--상태가 ??인 모든 상품 수 검색 -->
	<select id="selectStateIsCnt" resultType="Integer">
		SELECT COUNT(PRODUCT_ID) FROM PRODUCT WHERE PRODUCT_STATE = #{productState}
	</select>
	
	<!-- productId로 상세 정보 조회 -->
	<select id="selectDetails" resultMap="productDetailsResultMap">
		SELECT PM.*, IMAGE.IMG_PATH, IMAGE.IMG_CHANGE_NAME FROM (
			SELECT PRODUCT.*, MEMBER.MEMBER_NAME, MEMBER.MEMBER_EMAIL, MEMBER.MEMBER_PHONE,
            COALESCE((SELECT BUSINESS_NAME FROM SELLER WHERE MEMBER_ID = PRODUCT.MEMBER_ID), 'VOP') BUSINESS_NAME
			FROM PRODUCT JOIN MEMBER
			ON PRODUCT.MEMBER_ID = MEMBER.MEMBER_ID
			WHERE PRODUCT.PRODUCT_ID = #{productId}
        ) PM LEFT JOIN IMAGE ON PM.IMG_ID = IMAGE.IMG_ID
		
		<!-- SELECT PM.*, SELLER.BUSINESS_NAME FROM (
			SELECT P.*, M.MEMBER_ID PM_MEMBER_ID, M.MEMBER_NAME, M.MEMBER_EMAIL, M.MEMBER_PHONE 
			FROM PRODUCT P JOIN MEMBER M
			ON P.MEMBER_ID = M.MEMBER_ID
			WHERE P.PRODUCT_ID = #{productId}
		) PM LEFT JOIN SELLER ON PM.PM_MEMBER_ID = SELLER.MEMBER_ID -->
	</select>
	
	<!-- 상품 정보 변경 -->
	<update id="updateProduct">
		UPDATE PRODUCT SET PRODUCT_NAME = #{productName}, PRODUCT_PRICE = #{productPrice},
			PRODUCT_REMAINS = #{productRemains}, PRODUCT_PLACE = #{productPlace},
			CATEGORY = #{category}, IMG_ID = #{imgId} WHERE PRODUCT_ID = #{productId}
	</update>
	
	<!-- productId로 판매자 memberId 검색 -->
	<select id="selectMemberIdById" resultType="String">
		SELECT MEMBER_ID FROM PRODUCT WHERE PRODUCT_ID = #{productId}
	</select>
	
	<!-- 상품 재고 증감 -->
	<update id="updateRemains">
		UPDATE PRODUCT SET PRODUCT_REMAINS = PRODUCT_REMAINS + #{increaseNum}
		WHERE PRODUCT_ID = #{productId}
	</update>
	
	<!-- 상품 재고 검색 -->
	<select id="selectRemainsById" resultType="Integer">
		SELECT PRODUCT_REMAINS FROM PRODUCT WHERE PRODUCT_ID = #{productId}
	</select>
	
	<!-- 상품 상세 정보를 검색하여 OrderViewDTO로 반환 -->
	<select id="selectToOrderById" resultMap="com.web.vop.persistence.OrderMapper.OrderViewDTOResultMap">
		SELECT PD.*, IMAGE.IMG_PATH, IMAGE.IMG_CHANGE_NAME FROM (
		SELECT PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE, IMG_ID FROM PRODUCT WHERE PRODUCT_STATE = '판매중' 
		AND PRODUCT_ID IN 
		<foreach collection="array" index="index" item="productIds" open="(" separator="," close=")">
			#{productIds}
		</foreach>
		) PD JOIN IMAGE ON PD.IMG_ID = IMAGE.IMG_ID
	</select>
	
</mapper>