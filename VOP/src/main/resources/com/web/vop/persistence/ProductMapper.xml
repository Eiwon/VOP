<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.vop.persistence.ProductMapper">

   <resultMap type="com.web.vop.domain.ProductVO"
      id="productResultMap">
      <id property="productId" column="PRODUCT_ID" /> 
      <result property="memberId" column="MEMBER_ID" />
      <result property="productName" column="PRODUCT_NAME"/>
      <result property="productPrice" column="PRODUCT_PRICE"/>
      <result property="reviewNum" column="REVIEW_NUM"/>
      <result property="productRemains" column="PRODUCT_REMAINS"/>
      <result property="productPlace" column="PRODUCT_PLACE"/>
      <result property="productState" column="PRODUCT_STATE"/>
      <result property="category" column="CATEGORY"/>
      <result property="imgId" column="IMG_ID"/>
      <result property="productDateCreated" column="PRODUCT_DATE_CREATED"/>
      <result property="reviewAvg" column="REVIEW_AVG"/>
   </resultMap>
   
   <resultMap type="com.web.vop.domain.ProductDetailsDTO" 
   		id="productDetailsResultMap">
   		<id property="productId" column="PRODUCT_ID"/>
   		<result property="memberId" column="MEMBER_ID"/>
     	<result property="productName" column="PRODUCT_NAME"/>
      	<result property="productPrice" column="PRODUCT_PRICE"/>
   		<result property="productRemains" column="PRODUCT_REMAINS"/>
      	<result property="productPlace" column="PRODUCT_PLACE"/>
      	<result property="productState" column="PRODUCT_STATE"/>
      	<result property="category" column="CATEGORY"/>
      	<result property="imgId" column="IMG_ID"/>
      	<result property="productDateCreated" column="PRODUCT_DATE_CREATED"/>
		<result property="memberName" column="MEMBER_NAME"/>
		<result property="memberEmail" column="MEMBER_EMAIL"/>
		<result property="memberPhone" column="MEMBER_PHONE"/>
		<result property="businessName" column="BUSINESS_NAME"/>
		
   </resultMap>
   
   <!-- productId통해 상품 조회 -->
   <select id="selectProduct" resultMap="productResultMap">
   		SELECT * FROM PRODUCT
   		WHERE PRODUCT_ID = #{productId}
   </select>
    
   <!-- 댓글 총 갯수 검색  -->
   <!-- resultType="java.lang.Integer" 단일 값때만 사용, 코드 추가해서 테스트 통과 -->
   <select id="selectReviewCount" resultType="Integer">
    	SELECT COUNT(*) AS PRODUCT FROM REVIEW 
    	WHERE PRODUCT_ID = #{productId}
   </select>

	
   <!-- PRODUCT_ID 해당하는 리뷰(별) 총 합 -->
   <select id="selectReviewStar" resultType="Integer">
   		SELECT SUM(REVIEW_STAR) AS TOTAL_STAR_RATINGS
		FROM REVIEW
		WHERE PRODUCT_ID = #{productId}
   </select>
   
   
   <!-- 상품 댓글 수 카운터 -->
   <update id="updateReviewNum">
   		UPDATE PRODUCT SET REVIEW_NUM = #{reviewNum}
		WHERE PRODUCT_ID = #{productId}
   </update>
   
    <!-- 리뷰 평균 값 수정 -->
    <update id="updateReviewAvg">
		UPDATE PRODUCT SET REVIEW_AVG = #{reviewAvg}
		WHERE PRODUCT_ID = #{productId}
    </update>
    
    <!-- 상품 총 댓글 수 증가 -->
	<update id="reviewNumUP">
		UPDATE PRODUCT SET REVIEW_NUM = REVIEW_NUM + 1
		WHERE PRODUCT_ID = #{productId}
	</update>
	
	<!-- 상품 총 댓글 수 감소 -->
	<update id="reviewNumDown">
		UPDATE PRODUCT SET REVIEW_NUM = REVIEW_NUM - 1
		WHERE PRODUCT_ID = #{productId}
	</update>
   
	<!-- 상품 등록 -->
	<insert id="insertProduct">
   		INSERT INTO PRODUCT VALUES (
   		PRODUCT_SEQ.NEXTVAL, #{memberId}, #{productName}, #{productPrice},
   		0, #{productRemains}, #{productPlace}, #{productState}, #{category}, 
   		#{imgId}, SYSDATE, 0 
   		)
	</insert>
	
	<!-- 최근에 등록된 상품 ID 검색 -->
	<select id="selectLastInsertId" resultType="Integer">
		SELECT MAX(PRODUCT_ID) FROM PRODUCT
	</select>
   
	<!-- 상품 카테고리로 검색 (페이징) -->
	<select id="selectByCategory" resultMap="productResultMap">
   		SELECT * FROM (
   		SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN
   		FROM PRODUCT
 		WHERE CATEGORY = #{category} AND PRODUCT_STATE = #{productState}
   		) WHERE RN BETWEEN #{pagination.start} AND #{pagination.end}
	</select>

	<!-- 카테고리로 검색 결과 수량 -->
	<select id="selectByCategoryCnt" resultType="Integer">
		SELECT COUNT(PRODUCT_ID) FROM PRODUCT 
		WHERE CATEGORY = #{category} AND PRODUCT_STATE = #{productState}
	</select>

	<!-- 상품 이름으로 검색 (페이징) -->
	<select id="selectByName" resultMap="productResultMap">
   		SELECT * FROM (
   		SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN
   		FROM PRODUCT
   		WHERE PRODUCT_NAME LIKE #{productName} AND PRODUCT_STATE = #{productState}
   		) WHERE RN BETWEEN #{pagination.start} AND #{pagination.end}
   	</select>	

	<!-- 이름으로 검색 결과 수량 -->
	<select id="selectByNameCnt" resultType="Integer">
		SELECT COUNT(PRODUCT_ID) FROM PRODUCT 
		WHERE PRODUCT_NAME LIKE #{productName} AND PRODUCT_STATE = #{productState}
	</select>

	<!-- 카테고리를 선택하여 이름으로 검색 (페이징) -->
	<select id="selectByNameInCategory" resultMap="productResultMap">
		SELECT * FROM (
   		SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN
   		FROM PRODUCT
 		WHERE CATEGORY = #{category} AND PRODUCT_NAME LIKE #{productName} AND PRODUCT_STATE = #{productState}
   		) WHERE RN BETWEEN #{pagination.start} AND #{pagination.end}
	</select>
	
	<!-- 카테고리를 선택하여 이름으로 검색 결과 수량 -->
	<select id="selectByNameInCategoryCnt" resultType="Integer">
		SELECT COUNT(PRODUCT_ID) FROM PRODUCT 
		WHERE CATEGORY = #{category} AND PRODUCT_NAME LIKE #{productName} AND PRODUCT_STATE = #{productState}
	</select>
	
	<!-- memberId로 상품 조회 -->
	<select id="selectByMemberId" resultMap="productResultMap">
		SELECT * FROM (
		SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN
		FROM PRODUCT WHERE MEMBER_ID = #{memberId}
		) WHERE RN BETWEEN #{pagination.start} AND #{pagination.end}
	</select>
	
	<!-- memberId로 상품 갯수 조회 -->
	<select id="selectByMemberIdCnt" resultType="Integer">
		SELECT COUNT(PRODUCT_ID) FROM PRODUCT WHERE MEMBER_ID = #{memberId}
	</select>
	
	<!-- productId로 상품 상태 변경 -->
	<update id="updateState">
		UPDATE PRODUCT SET PRODUCT_STATE = #{productState} WHERE PRODUCT_ID = #{productId}
	</update>
	
	<!-- productId로 상품 상태 검색 -->
	<select id="selectStateByProductId" resultType="String">
		SELECT PRODUCT_STATE FROM PRODUCT WHERE PRODUCT_ID = #{productId}
	</select>
	
	<!-- productId로 상품 삭제 -->
	<delete id="deleteProduct">
		DELETE PRODUCT WHERE PRODUCT_ID = #{productId}
	</delete>
	
	<!-- 카테고리를 지정하여, 리뷰 수가 가장 많은 5개의 상품 검색 -->
	<select id="selectTopProductInCategory" resultMap="productResultMap">
		SELECT * FROM (
		SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY REVIEW_NUM DESC) RN FROM PRODUCT
		WHERE CATEGORY = #{category}
		) WHERE RN BETWEEN 1 AND 5
	</select>
	
	<!-- 최근 등록된 상품 5개 조회 -->
	<select id="selectRecent5" resultMap="productResultMap">
		SELECT * FROM (
		SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN FROM PRODUCT
		) WHERE RN BETWEEN 1 AND 5
	</select>

	<!-- 상태가 ??인 모든 상품 검색(페이징) -->
	<select id="selectStateIs" resultMap="productResultMap">
		SELECT * FROM (
			SELECT PRODUCT.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_ID DESC) RN FROM PRODUCT
			WHERE PRODUCT_STATE = #{productState}
		) WHERE RN BETWEEN #{pagination.start} AND #{pagination.end}
	</select>
	
	<!--상태가 ??인 모든 상품 수 검색 -->
	<select id="selectStateIsCnt" resultType="Integer">
		SELECT COUNT(PRODUCT_ID) FROM PRODUCT WHERE PRODUCT_STATE = #{productState}
	</select>
	
	<!-- productId로 상세 정보 조회 -->
	<select id="selectDetails" resultMap="productDetailsResultMap">
		SELECT PM.*, SELLER.BUSINESS_NAME FROM (
			SELECT P.*, M.MEMBER_ID PM_MEMBER_ID, M.MEMBER_NAME, M.MEMBER_EMAIL, M.MEMBER_PHONE 
			FROM PRODUCT P JOIN MEMBER M
			ON P.MEMBER_ID = M.MEMBER_ID
			WHERE P.PRODUCT_ID = #{productId}
		) PM LEFT OUTER JOIN SELLER ON PM.PM_MEMBER_ID = SELLER.MEMBER_ID
	</select>
	
	<!-- 상품 정보 변경 -->
	<update id="updateProduct">
		UPDATE PRODUCT SET PRODUCT_NAME = #{productName}, PRODUCT_PRICE = #{productPrice},
			PRODUCT_REMAINS = #{productRemains}, PRODUCT_PLACE = #{productPlace},
			CATEGORY = #{category}, IMG_ID = #{imgId} WHERE PRODUCT_ID = #{productId}
	</update>
	
	<!-- productId로 판매자 memberId 검색 -->
	<select id="selectMemberIdById" resultType="String">
		SELECT MEMBER_ID FROM PRODUCT WHERE PRODUCT_ID = #{productId}
	</select>
	
</mapper>